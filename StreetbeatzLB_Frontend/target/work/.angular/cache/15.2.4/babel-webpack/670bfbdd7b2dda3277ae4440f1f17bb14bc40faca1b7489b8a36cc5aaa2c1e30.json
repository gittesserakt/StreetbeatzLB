{"ast":null,"code":"import { mergeMap, of } from 'rxjs';\nimport { environment as env } from '../../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./external-api.service\";\nexport class MessageService {\n  constructor(externalApiService) {\n    this.externalApiService = externalApiService;\n    this.getPublicResource = () => {\n      const config = {\n        url: `${env.api.serverUrl}/messages/public`,\n        method: 'GET',\n        headers: {\n          'content-type': 'application/json'\n        }\n      };\n      return this.externalApiService.callExternalApi(config).pipe(mergeMap(response => {\n        const {\n          data,\n          error\n        } = response;\n        return of({\n          data: data ? data : null,\n          error\n        });\n      }));\n    };\n    this.getProtectedResource = () => {\n      const config = {\n        url: `${env.api.serverUrl}/messages/protected`,\n        method: 'GET',\n        headers: {\n          'content-type': 'application/json'\n        }\n      };\n      return this.externalApiService.callExternalApi(config).pipe(mergeMap(response => {\n        const {\n          data,\n          error\n        } = response;\n        return of({\n          data: data ? data : null,\n          error\n        });\n      }));\n    };\n  }\n}\nMessageService.ɵfac = function MessageService_Factory(t) {\n  return new (t || MessageService)(i0.ɵɵinject(i1.ExternalApiService));\n};\nMessageService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: MessageService,\n  factory: MessageService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AACA,SAASA,QAAQ,EAAcC,EAAE,QAAQ,MAAM;AAC/C,SAASC,WAAW,IAAIC,GAAG,QAAQ,mCAAmC;;;AAOtE,OAAM,MAAOC,cAAc;EACzBC,YAAmBC,kBAAsC;IAAtC,uBAAkB,GAAlBA,kBAAkB;IAErC,sBAAiB,GAAG,MAAmC;MACrD,MAAMC,MAAM,GAAuB;QACjCC,GAAG,EAAE,GAAGL,GAAG,CAACM,GAAG,CAACC,SAAS,kBAAkB;QAC3CC,MAAM,EAAE,KAAK;QACbC,OAAO,EAAE;UACP,cAAc,EAAE;;OAEnB;MAED,OAAO,IAAI,CAACN,kBAAkB,CAACO,eAAe,CAACN,MAAM,CAAC,CAACO,IAAI,CACzDd,QAAQ,CAAEe,QAAQ,IAAI;QACpB,MAAM;UAAEC,IAAI;UAAEC;QAAK,CAAE,GAAGF,QAAQ;QAEhC,OAAOd,EAAE,CAAC;UACRe,IAAI,EAAEA,IAAI,GAAIA,IAAgB,GAAG,IAAI;UACrCC;SACD,CAAC;MACJ,CAAC,CAAC,CACH;IACH,CAAC;IAED,yBAAoB,GAAG,MAAmC;MACxD,MAAMV,MAAM,GAAuB;QACjCC,GAAG,EAAE,GAAGL,GAAG,CAACM,GAAG,CAACC,SAAS,qBAAqB;QAC9CC,MAAM,EAAE,KAAK;QACbC,OAAO,EAAE;UACP,cAAc,EAAE;;OAEnB;MAED,OAAO,IAAI,CAACN,kBAAkB,CAACO,eAAe,CAACN,MAAM,CAAC,CAACO,IAAI,CACzDd,QAAQ,CAAEe,QAAQ,IAAI;QACpB,MAAM;UAAEC,IAAI;UAAEC;QAAK,CAAE,GAAGF,QAAQ;QAEhC,OAAOd,EAAE,CAAC;UACRe,IAAI,EAAEA,IAAI,GAAIA,IAAgB,GAAG,IAAI;UACrCC;SACD,CAAC;MACJ,CAAC,CAAC,CACH;IACH,CAAC;EA1C2D;;AADjDb,cAAc;mBAAdA,cAAc;AAAA;AAAdA,cAAc;SAAdA,cAAc;EAAAc,SAAdd,cAAc;EAAAe,YAFb;AAAM","names":["mergeMap","of","environment","env","MessageService","constructor","externalApiService","config","url","api","serverUrl","method","headers","callExternalApi","pipe","response","data","error","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Hannes\\Desktop\\StreetbeatzLB\\StreetbeatzLB_Frontend\\src\\app\\core\\services\\message.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { mergeMap, Observable, of } from 'rxjs';\r\nimport { environment as env } from '../../../environments/environment';\r\nimport { ApiResponseModel, Message, RequestConfigModel } from '../models';\r\nimport { ExternalApiService } from './external-api.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class MessageService {\r\n  constructor(public externalApiService: ExternalApiService) {}\r\n\r\n  getPublicResource = (): Observable<ApiResponseModel> => {\r\n    const config: RequestConfigModel = {\r\n      url: `${env.api.serverUrl}/messages/public`,\r\n      method: 'GET',\r\n      headers: {\r\n        'content-type': 'application/json',\r\n      },\r\n    };\r\n\r\n    return this.externalApiService.callExternalApi(config).pipe(\r\n      mergeMap((response) => {\r\n        const { data, error } = response;\r\n\r\n        return of({\r\n          data: data ? (data as Message) : null,\r\n          error,\r\n        });\r\n      })\r\n    );\r\n  };\r\n\r\n  getProtectedResource = (): Observable<ApiResponseModel> => {\r\n    const config: RequestConfigModel = {\r\n      url: `${env.api.serverUrl}/messages/protected`,\r\n      method: 'GET',\r\n      headers: {\r\n        'content-type': 'application/json'\r\n      },\r\n    };\r\n\r\n    return this.externalApiService.callExternalApi(config).pipe(\r\n      mergeMap((response) => {\r\n        const { data, error } = response;\r\n\r\n        return of({\r\n          data: data ? (data as Message) : null,\r\n          error,\r\n        });\r\n      })\r\n    );\r\n  };\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}