{"ast":null,"code":"import { catchError, mergeMap, of } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ExternalApiService {\n  constructor(http) {\n    this.http = http;\n    this.callExternalApi = config => {\n      return this.http.request(config.method, config.url, {\n        headers: {\n          ...config.headers\n        }\n      }).pipe(mergeMap(data => {\n        return of({\n          data: data,\n          error: null\n        });\n      }), catchError(err => {\n        if (err.error && err.status) {\n          return of({\n            data: null,\n            error: err.error\n          });\n        }\n        return of({\n          data: null,\n          error: {\n            message: err.message\n          }\n        });\n      }));\n    };\n  }\n}\nExternalApiService.ɵfac = function ExternalApiService_Factory(t) {\n  return new (t || ExternalApiService)(i0.ɵɵinject(i1.HttpClient));\n};\nExternalApiService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ExternalApiService,\n  factory: ExternalApiService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAEA,SAASA,UAAU,EAAEC,QAAQ,EAAcC,EAAE,QAAQ,MAAM;;;AAM3D,OAAM,MAAOC,kBAAkB;EAC7BC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAExB,oBAAe,GAAIC,MAA0B,IAAkC;MAC7E,OAAO,IAAI,CAACD,IAAI,CACbE,OAAO,CAAUD,MAAM,CAACE,MAAM,EAAEF,MAAM,CAACG,GAAG,EAAE;QAC3CC,OAAO,EAAE;UAAE,GAAGJ,MAAM,CAACI;QAAO;OAC7B,CAAC,CACDC,IAAI,CACHV,QAAQ,CAAEW,IAAI,IAAI;QAChB,OAAOV,EAAE,CAAC;UACRU,IAAI,EAAEA,IAAI;UACVC,KAAK,EAAE;SACR,CAAC;MACJ,CAAC,CAAC,EACFb,UAAU,CAAEc,GAAG,IAAI;QACjB,IAAIA,GAAG,CAACD,KAAK,IAAIC,GAAG,CAACC,MAAM,EAAE;UAC3B,OAAOb,EAAE,CAAC;YACRU,IAAI,EAAE,IAAI;YACVC,KAAK,EAAEC,GAAG,CAACD;WACZ,CAAC;;QAGJ,OAAOX,EAAE,CAAC;UACRU,IAAI,EAAE,IAAI;UACVC,KAAK,EAAE;YACLG,OAAO,EAAEF,GAAG,CAACE;;SAEhB,CAAC;MACJ,CAAC,CAAC,CACH;IACL,CAAC;EA9BsC;;AAD5Bb,kBAAkB;mBAAlBA,kBAAkB;AAAA;AAAlBA,kBAAkB;SAAlBA,kBAAkB;EAAAc,SAAlBd,kBAAkB;EAAAe,YAFjB;AAAM","names":["catchError","mergeMap","of","ExternalApiService","constructor","http","config","request","method","url","headers","pipe","data","error","err","status","message","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Hannes\\Desktop\\StreetbeatzLB\\StreetbeatzLB_Frontend\\src\\app\\core\\services\\external-api.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { catchError, mergeMap, Observable, of } from 'rxjs';\r\nimport { ApiResponseModel, RequestConfigModel } from '../models';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ExternalApiService {\r\n  constructor(private http: HttpClient) {}\r\n\r\n  callExternalApi = (config: RequestConfigModel): Observable<ApiResponseModel> => {\r\n    return this.http\r\n      .request<unknown>(config.method, config.url, {\r\n        headers: { ...config.headers },\r\n      })\r\n      .pipe(\r\n        mergeMap((data) => {\r\n          return of({\r\n            data: data,\r\n            error: null,\r\n          });\r\n        }),\r\n        catchError((err) => {\r\n          if (err.error && err.status) {\r\n            return of({\r\n              data: null,\r\n              error: err.error,\r\n            });\r\n          }\r\n\r\n          return of({\r\n            data: null,\r\n            error: {\r\n              message: err.message,\r\n            },\r\n          });\r\n        })\r\n      );\r\n  };\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}