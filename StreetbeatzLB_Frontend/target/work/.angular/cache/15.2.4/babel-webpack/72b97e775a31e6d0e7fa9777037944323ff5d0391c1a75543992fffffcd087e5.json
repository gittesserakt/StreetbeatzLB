{"ast":null,"code":"import { mergeMap, of } from 'rxjs';\nimport { environment as env } from '../../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./external-api.service\";\nexport let MessageService = /*#__PURE__*/(() => {\n  class MessageService {\n    constructor(externalApiService) {\n      this.externalApiService = externalApiService;\n      this.getPublicResource = () => {\n        const config = {\n          url: `${env.api.serverUrl}/messages/public`,\n          method: 'GET',\n          headers: {\n            'content-type': 'application/json'\n          }\n        };\n        return this.externalApiService.callExternalApi(config).pipe(mergeMap(response => {\n          const {\n            data,\n            error\n          } = response;\n          return of({\n            data: data ? data : null,\n            error\n          });\n        }));\n      };\n      this.getProtectedResource = () => {\n        const config = {\n          url: `${env.api.serverUrl}/messages/protected`,\n          method: 'GET',\n          headers: {\n            'content-type': 'application/json'\n          }\n        };\n        return this.externalApiService.callExternalApi(config).pipe(mergeMap(response => {\n          const {\n            data,\n            error\n          } = response;\n          return of({\n            data: data ? data : null,\n            error\n          });\n        }));\n      };\n    }\n  }\n  MessageService.ɵfac = function MessageService_Factory(t) {\n    return new (t || MessageService)(i0.ɵɵinject(i1.ExternalApiService));\n  };\n  MessageService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: MessageService,\n    factory: MessageService.ɵfac,\n    providedIn: 'root'\n  });\n  return MessageService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}