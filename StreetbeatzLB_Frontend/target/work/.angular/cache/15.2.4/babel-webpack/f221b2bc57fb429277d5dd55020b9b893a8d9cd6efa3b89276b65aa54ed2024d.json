{"ast":null,"code":"import { isDevMode } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { ServiceWorkerModule } from '@angular/service-worker';\nimport { HTTP_INTERCEPTORS, HttpClientModule } from '@angular/common/http';\nimport { environment as env } from '../environments/environment';\nimport { AuthHttpInterceptor, AuthModule } from '@auth0/auth0-angular';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/service-worker\";\nimport * as i2 from \"@auth0/auth0-angular\";\nexport class AppModule {}\nAppModule.ɵfac = function AppModule_Factory(t) {\n  return new (t || AppModule)();\n};\nAppModule.ɵmod = /*@__PURE__*/i0.ɵɵdefineNgModule({\n  type: AppModule,\n  bootstrap: [AppComponent]\n});\nAppModule.ɵinj = /*@__PURE__*/i0.ɵɵdefineInjector({\n  providers: [{\n    provide: HTTP_INTERCEPTORS,\n    useClass: AuthHttpInterceptor,\n    multi: true\n  }],\n  imports: [BrowserModule, AppRoutingModule, HttpClientModule, ServiceWorkerModule.register('ngsw-worker.js', {\n    enabled: !isDevMode(),\n    // Register the ServiceWorker as soon as the application is stable\n    // or after 30 seconds (whichever comes first).\n    registrationStrategy: 'registerWhenStable:30000'\n  }), AuthModule.forRoot({\n    ...env.auth0,\n    httpInterceptor: {\n      allowedList: [`${env.api.serverUrl}/messages`]\n    }\n  })]\n});\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && i0.ɵɵsetNgModuleScope(AppModule, {\n    declarations: [AppComponent],\n    imports: [BrowserModule, AppRoutingModule, HttpClientModule, i1.ServiceWorkerModule, i2.AuthModule]\n  });\n})();","map":{"version":3,"mappings":"AAAA,SAAmBA,SAAS,QAAQ,eAAe;AACnD,SAASC,aAAa,QAAQ,2BAA2B;AACzD,SAASC,gBAAgB,QAAQ,sBAAsB;AACvD,SAASC,YAAY,QAAQ,iBAAiB;AAC9C,SAASC,mBAAmB,QAAQ,yBAAyB;AAC7D,SAASC,iBAAiB,EAAEC,gBAAgB,QAAQ,sBAAsB;AAC1E,SAASC,WAAW,IAAIC,GAAG,QAAQ,6BAA6B;AAChE,SAASC,mBAAmB,EAAEC,UAAU,QAAQ,sBAAsB;;;;AAgCtE,OAAM,MAAOC,SAAS;AAATA,SAAS;mBAATA,SAAS;AAAA;AAATA,SAAS;QAATA,SAAS;EAAAC,YAFRT,YAAY;AAAA;AAEbQ,SAAS;aAPT,CAAC;IACVE,OAAO,EAAER,iBAAiB;IAC1BS,QAAQ,EAAEL,mBAAmB;IAC7BM,KAAK,EAAE;GACR,CAAC;EAAAC,UAtBAf,aAAa,EACbC,gBAAgB,EAChBI,gBAAgB,EAChBF,mBAAmB,CAACa,QAAQ,CAAC,gBAAgB,EAAE;IAC7CC,OAAO,EAAE,CAAClB,SAAS,EAAE;IACrB;IACA;IACAmB,oBAAoB,EAAE;GACvB,CAAC,EACFT,UAAU,CAACU,OAAO,CAAC;IACjB,GAAGZ,GAAG,CAACa,KAAK;IACZC,eAAe,EAAE;MACfC,WAAW,EAAE,CACX,GAAGf,GAAG,CAACgB,GAAG,CAACC,SAAS,WAAW;;GAGpC,CAAC;AAAA;;2EASOd,SAAS;IAAAe,eA5BlBvB,YAAY;IAAAa,UAGZf,aAAa,EACbC,gBAAgB,EAChBI,gBAAgB;EAAA;AAAA","names":["isDevMode","BrowserModule","AppRoutingModule","AppComponent","ServiceWorkerModule","HTTP_INTERCEPTORS","HttpClientModule","environment","env","AuthHttpInterceptor","AuthModule","AppModule","bootstrap","provide","useClass","multi","imports","register","enabled","registrationStrategy","forRoot","auth0","httpInterceptor","allowedList","api","serverUrl","declarations"],"sourceRoot":"","sources":["C:\\Users\\Hannes\\Desktop\\StreetbeatzLB\\StreetbeatzLB_Frontend\\src\\app\\app.module.ts"],"sourcesContent":["import { NgModule, isDevMode } from '@angular/core';\r\nimport { BrowserModule } from '@angular/platform-browser';\r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { AppComponent } from './app.component';\r\nimport { ServiceWorkerModule } from '@angular/service-worker';\r\nimport { HTTP_INTERCEPTORS, HttpClientModule } from '@angular/common/http';\r\nimport { environment as env } from '../environments/environment';\r\nimport { AuthHttpInterceptor, AuthModule } from '@auth0/auth0-angular';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    AppRoutingModule,\r\n    HttpClientModule,\r\n    ServiceWorkerModule.register('ngsw-worker.js', {\r\n      enabled: !isDevMode(),\r\n      // Register the ServiceWorker as soon as the application is stable\r\n      // or after 30 seconds (whichever comes first).\r\n      registrationStrategy: 'registerWhenStable:30000'\r\n    }),\r\n    AuthModule.forRoot({\r\n      ...env.auth0,\r\n      httpInterceptor: {\r\n        allowedList: [\r\n          `${env.api.serverUrl}/messages`,\r\n        ],\r\n      },\r\n    }),\r\n  ],\r\n  providers: [{\r\n    provide: HTTP_INTERCEPTORS,\r\n    useClass: AuthHttpInterceptor,\r\n    multi: true,\r\n  }],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}