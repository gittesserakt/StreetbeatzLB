{"ast":null,"code":"import { catchError, mergeMap, of } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let ExternalApiService = /*#__PURE__*/(() => {\n  class ExternalApiService {\n    constructor(http) {\n      this.http = http;\n      this.callExternalApi = config => {\n        return this.http.request(config.method, config.url, {\n          headers: {\n            ...config.headers\n          }\n        }).pipe(mergeMap(data => {\n          return of({\n            data: data,\n            error: null\n          });\n        }), catchError(err => {\n          if (err.error && err.status) {\n            return of({\n              data: null,\n              error: err.error\n            });\n          }\n          return of({\n            data: null,\n            error: {\n              message: err.message\n            }\n          });\n        }));\n      };\n    }\n  }\n  ExternalApiService.ɵfac = function ExternalApiService_Factory(t) {\n    return new (t || ExternalApiService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  ExternalApiService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ExternalApiService,\n    factory: ExternalApiService.ɵfac,\n    providedIn: 'root'\n  });\n  return ExternalApiService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}